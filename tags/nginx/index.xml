<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nginx on Shrayas</title>
    <link>http://shrayasr.github.io/tags/nginx/</link>
    <description>Recent content in Nginx on Shrayas</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 11 Dec 2015 22:40:00 +0530</lastBuildDate>
    
	<atom:link href="http://shrayasr.github.io/tags/nginx/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Simple NGINX hosting</title>
      <link>http://shrayasr.github.io/posts/simple-nginx-hosting/</link>
      <pubDate>Fri, 11 Dec 2015 22:40:00 +0530</pubDate>
      
      <guid>http://shrayasr.github.io/posts/simple-nginx-hosting/</guid>
      <description>Start by installing NGINX. It comes with a decent set of defaults that are enough to get started. A quick set of things to remember (on an Ubuntu box) are:
 /etc/NGINX/sites-enabled/ holds configuration for different sites behind the reverse proxy Logs (access &amp;amp; error) can be found in /var/log/NGINX/ The main NGINX configuration can be found at /etc/NGINX/NGINX.conf  Before we start adding in the NGINX configuration. Let us make http://foobar redirect to our computer.</description>
    </item>
    
    <item>
      <title>Hiccups with Hosting ASP .NET 5 apps on Linux (RC1)</title>
      <link>http://shrayasr.github.io/posts/aspnet5-hosting-hiccups-nginx-kestrel/</link>
      <pubDate>Fri, 11 Dec 2015 20:45:00 +0530</pubDate>
      
      <guid>http://shrayasr.github.io/posts/aspnet5-hosting-hiccups-nginx-kestrel/</guid>
      <description>Background After the recent dance with multiple Mono versions, the next step was to actually host the application.
Even though the app is largely still unfinished, I wanted to give it a shot on the staging instance to get a feel for things.
The general way to host apps on a Linux box is to have a NGINX reverse proxy in front, listening to different names on port 80 and to proxy the requests to internally running servers.</description>
    </item>
    
  </channel>
</rss>